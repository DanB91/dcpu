; void *memmove(void *dest, const void *src, size_t n);
;
; Copies the values of num bytes from the location pointed by source to the
; memory block pointed by destination. Copying takes place as if an
; intermediate buffer were used, allowing the destination and source to overlap.
;
; The underlying type of the objects pointed by both the source and
; destination pointers are irrelevant for this function; The result is
; a binary copy of the data.
;
; The function does not check for any terminating null character
; in source - it always copies exactly num bytes.
;
; To avoid overflows, the size of the arrays pointed by both the
; destination and source parameters, shall be at least num bytes.
; 
; Returns destination address.
;
; ## Version History:
;   0.1.0: Initial implementation for spec 1.7.
;
:memmove
; size is zero -- Nothing to copy.
   ife c, 0
      set pc, pop

; a and b are the same locations -- Nothing to copy.
   ife a, b
      set pc, pop

; Copying only one word is special cased.
   ifg c, 1
      set pc, memmove_range

   set [a], [b]
   set pc, pop

:memmove_range
; Store pointers in (de|in)crementing registers.
   set i, a
   set j, b

; Destructive overlap == dst >= src && dest < src + n.
   ifl i, j
      set pc, memmove_no_overlap

   add b, c
   sub b, 1
   ifg a, b
      set pc, memmove_no_overlap

   sub c, 1
   add i, c
   add j, c
   add c, 1

:memmove_overlap
   std [i], [j]
   sub c, 1
   ifg c, 0
      set pc, memmove_overlap

   set pc, pop

:memmove_no_overlap
   sti [i], [j]
   sub c, 1
   ifg c, 0
      set pc, memmove_no_overlap

   set pc, pop
