; char * strtok ( char * str, const char * delimiters );
;
; A sequence of calls to this function split str into tokens,
; which are sequences of contiguous characters separated by any of
; the characters that are part of delimiters.
;
; On a first call, the function expects a C string as argument for
; str, whose first character is used as the starting location to
; scan for tokens. In subsequent calls, the function expects a null
; pointer and uses the position right after the end of last token
; as the new starting location for scanning.
;
; To determine the beginning and the end of a token, the function
; first scans from the starting location for the first character
; not contained in delimiters (which becomes the beginning of the
; token). And then scans starting from this beginning of the token
; for the first character contained in delimiters, which becomes
; the end of the token.
;
; This end of the token is automatically replaced by a null-character
; by the function, and the beginning of the token is returned by
; the function.
;
; Once the terminating null character of str has been found in a call
; to strtok, all subsequent calls to this function with a null pointer
; as the first argument return a null pointer.
;
; Note that this function modifies the original input string by replacing
; token delimiters with NULL terminators.
;
; ## Dependencies
;   strchr.dasm
;   strpbrk.dasm
;
; ## Version History:
;   0.1.0: Initial implementation for spec 1.7.
;
:strtok
  ifn a, 0
    set [strtok_ptr], a

  ife a, 0
    ife [strtok_ptr], 0
      set pc, pop ; No (stored) pointer available

  set push, x
  set x, [strtok_ptr]

  set push, y
  set y, b

; Is str[i] a delimiter?
:strtok_is_delim
  set a, y
  set b, [x]
  add x, 1
  jsr strchr

  ifg a, 0
    set pc, strtok_found_delim

  set pc, strtok_is_delim

; str[i] is a delimiter.
; If i > 0, then return a new token.
; Otherwise, continue to find delimiters.
:strtok_found_delim
  ifn [strtok_ptr], x
    set pc, strtok_yield

  set [strtok_ptr], x
  set pc, strtok_is_delim

:strtok_yield
  

:strtok_ret
  set y, pop
  set x, pop
  set pc, pop


; Internal pointer. Retains state across multiple calls when
; tokenizing the same string.
;
; Note that this inherently makes this function non-threadsafe.
; A threadsafe variety of strtok should accept a third parameter which
; points to the remaining string buffer contents.
:strtok_ptr dat 0

